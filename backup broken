#include "sparsemat.h"

#include <stdio.h>
#include <stdlib.h>



void sortlist(sp_tuples_node** head_ptr, int* countlength);

sp_tuples * load_tuples(char* input_file)
{
  sp_tuples* start = (sp_tuples*)malloc(sizeof(sp_tuples));

  FILE *file = fopen(input_file, "r");

  int row, col;
  double value = 0;
  char endline;
  fscanf(file, "%d %d %c", &row, &col, &endline);
  start->m = row;
  start->n = col;

  int countnz = 0; // count non-zero entries as we loop

  sp_tuples_node* head = (sp_tuples_node*)malloc(sizeof(sp_tuples_node));
  while (value == 0){
    fscanf(file, "%d %d %lf %c", &row, &col, &value, &endline);
    if (value != 0){
      start->tuples_head = head;
      head->value = value;
      head->row = row;
      head->col = col;
      head->next = NULL;
      countnz++;
    }
  }
  sp_tuples_node* tempPrevNode = head;

  while (!feof(file)){
    fscanf(file, "%d %d %lf %c", &row, &col, &value, &endline);
    if (value != 0){
      sp_tuples_node* tempnode = (sp_tuples_node*)malloc(sizeof(sp_tuples_node));
      if (head->next == NULL){
        head->next = tempnode;
      }
      tempnode->value = value;
      tempnode->row = row;
      tempnode->col = col;
      tempPrevNode->next = tempnode;
      tempnode->next = NULL;
      tempPrevNode = tempnode;
      countnz++;
    }
  }

  fclose(file);

  //order the linked list
  sp_tuples_node** head_ptr = &(start->tuples_head);
  sortlist(head_ptr, &countnz);
  start->nz = countnz;



  return start;
}

void sortlist(sp_tuples_node** head_ptr, int* countlength){

  int i, j, cur_row, cur_col, compare_row, compare_col;
  sp_tuples_node* compare_node = *head_ptr;
  sp_tuples_node* prev_node = *head_ptr;
  sp_tuples_node* cur_node = prev_node->next;
  sp_tuples_node* next_node = cur_node->next;

  for (i=1; i< *countlength; i++){
    cur_row = cur_node->row;
    cur_col = cur_node->col;
    compare_node = *head_ptr;
    prev_node->next = next_node;

    for (j=0; j<i; j++){
      compare_row = compare_node->row;
      compare_col = compare_node->col;

      if (cur_row < compare_row){
        sp_tuples_node* temp = compare_node;
        compare_node = cur_node;
        cur_node->next = temp;
        break;
      }

      if (cur_row == compare_row && cur_col < compare_col){
        sp_tuples_node* temp = compare_node;
        compare_node = cur_node;
        cur_node->next = temp;
        break;
      }

      if (cur_row == compare_row && cur_col == compare_col){
        sp_tuples_node* temp = compare_node;
        compare_node = cur_node;
        cur_node->next = temp->next;
        free(temp);  //removed a node, need to change the length of the list
        countlength--;
        break;
      }

      compare_node = compare_node->next;
    }
    cur_node = next_node;
    prev_node = cur_node;
    next_node = cur_node->next;
    //double check to make sure it doesn't go past NULL
  }

}

double gv_tuples(sp_tuples * mat_t,int row,int col)
{
  sp_tuples_node *head = mat_t->tuples_head;
  do{ //if the value at row,col exists we return from linked list. If not, return 0;
	   if(head->row == row && head->col == col){
       return head->value;
     }
     head = head->next;
  }while(head != NULL);

  return 0;
}

void set_tuples(sp_tuples * mat_t, int row, int col, double value)

	{
		sp_tuples_node *head = mat_t->tuples_head;
		sp_tuples_node *prehead = NULL;
		sp_tuples_node *temp;
		while(head!=NULL) {//check if head is at the end of the list or at a value in the list
			if(head->row==row && head->col==col) {
				break;
			}
			prehead = head;
			head=head->next;
		}
    if(value==0) {//if value==0, we delete that node if it exists
    	if(head!=NULL) {
    		temp = head->next;
    		prehead->next = temp;
    		while(head!=NULL) {
    			free(head);
    			head=head->next;
    		}
    	}
    }
    else
        {
    	if(head!=NULL) {//if value is anything else and a node exists at that row, col, we replace it with the new value, if not we create a new node at the end of the list
    		head->value=value;
    	}
        else
            {
    		head->row = row;
    		head->col = col;
    		head->value = value;
    		head->next = NULL;
    	}
    }
    //sort(mat_t->tuples_head); //we sort the list
}

void save_tuples(char * file_name, sp_tuples * mat_t)
{
  FILE *f;
  sp_tuples_node * current = mat_t->tuples_head;
  f = fopen(file_name,"w");
  fprintf(f, "%d %d\n",(mat_t->m),(mat_t->n));

  while(current != NULL){//prints in the file all the values from the mat_t file
  	fprintf(f, "%d %d %lf", current->row,current->col,current->value);
		current = current->next;
  }
}



sp_tuples * add_tuples(sp_tuples * matA, sp_tuples * matB) {
  if(matA->m != matB->m || matA->n != matB->n) {//checks if addition is valid
    return NULL;
  }
  sp_tuples *matC = (sp_tuples*) malloc(sizeof(sp_tuples));//allocates space for the result matrix
  int row,col;
  row = matA->m;
  col = matB->n;
  matC->m = row;
  matC->n = col;
  matC->nz = 0;
  matC->tuples_head = (sp_tuples_node*)calloc(1,sizeof(sp_tuples_node));//allocates space for the head tuple
  matC->tuples_head->row = -1;
  matC->tuples_head->col = -1;
  sp_tuples_node *head = matA->tuples_head;
  while(head!=NULL) {//adds from the first matrix
  	set_tuples(matC, head->row, head->col, head->value);
  	matC->nz++;
  	head=head->next;
  }
  head = matB->tuples_head;
  while(head!=NULL) {//adds from the second matrix
  	if(gv_tuples(matC, head->row, head->col)!=0) {//if value already exists, the nz counter is not incremented
  		set_tuples(matC, head->row, head->col, (gv_tuples(matC, head->row, head->col)+head->value));
  	} else {
  		matC->nz++;
  		set_tuples(matC, head->row, head->col, head->value);
  	}
  }
  head = matC->tuples_head;
  matC->tuples_head = head->next;//last node is freed
  free(head);
  return matC;
}



sp_tuples * mult_tuples(sp_tuples * matA, sp_tuples * matB) {
	if(matA->n != matB->m) {//checks if multiplication is possible
		return NULL;
	}
  sp_tuples * matC = (sp_tuples*) malloc(sizeof(sp_tuples));//allocates the space for the matrix
  int i,j,row,col,iA,jA,iB,jB;
  row = matA->m;
  col = matB->n;
  matC->m = row;
  matC->n = col;
  matC->tuples_head = (sp_tuples_node*)calloc(1,sizeof(sp_tuples_node));//allocates the space for the head tuple
  sp_tuples_node * headC = matC->tuples_head;
  sp_tuples_node * headB = matB->tuples_head;
  sp_tuples_node * headA = matA->tuples_head;
  for(i = 0; i < row; i++) {//initializes the result matrix by setting all to 0
  	for(j = 0; j < col; j++) {
  		headC->row = i;
  		headC->col = j;
  		headC->value = 0;
  		headC = headC->next;
  	}
  }
  headC = matC->tuples_head;
  while(headA != NULL) {//first checks through matrix A
  	iA = headA->row;
  	iB = headA->col;
  	headB = matB->tuples_head;
  	while(headB != NULL) {//goes through matrix B
  		jA = headB->row;
  		jB = headB->col;
  		if(iA==jB) {
  			headC->row = iB;//only does the computation if iA==jB
  			headC->col = jA;
  			headC->value = headC->value + (headA->value)*(headB->value);
  			headC = headC->next;
  		}
  		headB = headB->next;
  	}
  	headA = headA->next;
  }
  headC = matC->tuples_head;//frees the memory
  matC->tuples_head = headC->next;
  headB = matB->tuples_head;
  matB->tuples_head = headB->next;
  headA = matA->tuples_head;
  matA->tuples_head = headA->next;
  free(headC);
  free(headB);
  free(headA);
  return matC;
}


void destroy_tuples(sp_tuples * mat_t){
	sp_tuples_node *head=mat_t->tuples_head,*prehead;	//Free every linked node first
	while(head!=NULL)
	{
		prehead=head;//destroys tuples as we go
		head=head->next;
		free(prehead);
	}
	free(mat_t);	//free our main structure
}
